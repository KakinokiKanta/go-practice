package main

import (
	"database/sql"
	"dbsample/models"
	"fmt"

	_ "github.com/go-sql-driver/mysql"
)

func main() {
	// MySQLユーザやパスワード、データベースを、MySQLコンテナとのコネクション確立に必要な形式にする
	dbUser := "docker"
	dbPassword := "docker"
	dbDatabase := "sampledb"
	dbConn := fmt.Sprintf("%s:%s@tcp(localhost:3306)/%s?parseTime=true", dbUser, dbPassword, dbDatabase)

	// dbConn変数を用いて、MySQLコンテナとの接続を確立する
	db, err := sql.Open("mysql", dbConn)
	if err != nil {
		fmt.Println(err)
	}
	defer db.Close()

	// sql文を定義
	articleID := 1
	const sqlStr = `
		select * from articles where article_id=?;
	`
	// sql.DB型のメソッドQueryRowを用いてsql文を実行、返り値をrow変数に格納
	row := db.QueryRow(sqlStr, articleID)
	if err := row.Err(); err != nil {
		fmt.Println(err)
		return
	}

	// article変数の各フィールドに取得レコードのデータを入れる
	// (SQLクエリのselect句から、タイトル・本文・ユーザ名・いいね数が返ってくることはわかっている)
	var article models.Article
	var createdTime sql.NullTime
	// rowsに存在するレコードそれぞれに対して、繰り返し処理を実行
	err = row.Scan(&article.ID, &article.Title, &article.Contents, &article.UserName, &article.NiceNum, &createdTime)
	if err != nil {
		fmt.Println(err)
		return
	}
	if createdTime.Valid {
		article.CreatedAt = createdTime.Time
	}

	fmt.Printf("%+v\n", article)
}
